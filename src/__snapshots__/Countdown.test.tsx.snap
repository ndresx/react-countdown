// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Countdown /> legacy mode should allow adding time in seconds 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  count={3}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={2}
>
  <Countdown
    count={3}
  >
    <LegacyCountdownOverlay
      count={4}
    >
      <div
        className="countdown"
      >
        4
      </div>
    </LegacyCountdownOverlay>
  </Countdown>
</Countdown>
`;

exports[`<Countdown /> legacy mode should render legacy countdown 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  count={3}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={2}
>
  <Countdown
    count={3}
  >
    <LegacyCountdownOverlay
      count={3}
    >
      <div
        className="countdown"
      >
        3
      </div>
    </LegacyCountdownOverlay>
  </Countdown>
</Countdown>
`;

exports[`<Countdown /> legacy mode should render legacy countdown without count prop 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={2}
>
  <Countdown>
    <LegacyCountdownOverlay
      count={3}
    >
      <div
        className="countdown"
      >
        3
      </div>
    </LegacyCountdownOverlay>
  </Countdown>
</Countdown>
`;

exports[`<Countdown /> legacy mode should trigger onComplete callback when count reaches 0 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  count={3}
  daysInHours={false}
  intervalDelay={1000}
  onComplete={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  precision={0}
  zeroPadTime={2}
>
  <Countdown
    count={3}
    onComplete={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  >
    <LegacyCountdownOverlay
      count={1}
    >
      <div
        className="countdown"
      >
        1
      </div>
    </LegacyCountdownOverlay>
  </Countdown>
</Countdown>
`;

exports[`<Countdown /> should render and unmount component on countdown end 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={1482453477527}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={0}
>
  <span>
    1
    :
    1
    :
    1
    :
    50
  </span>
</Countdown>
`;

exports[`<Countdown /> should render and unmount component on countdown end 2`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={0}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={0}
>
  <span>
    1
    :
    1
    :
    1
    :
    50
  </span>
</Countdown>
`;

exports[`<Countdown /> should render custom renderer output 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={1482453477527}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  renderer={[Function]}
  zeroPadTime={2}
>
  <div>
    1
    1
    1
    50
  </div>
</Countdown>
`;

exports[`<Countdown /> should render with daysInHours => true 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={1482453477527}
  daysInHours={true}
  intervalDelay={1000}
  precision={0}
  zeroPadTime={2}
>
  <span>
    25
    :
    01
    :
    50
  </span>
</Countdown>
`;

exports[`<Countdown /> should render with zeroPadDays => 3 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={1483227367071}
  daysInHours={false}
  intervalDelay={1000}
  precision={0}
  zeroPadDays={3}
  zeroPadTime={2}
>
  <span>
    010
    :
    00
    :
    00
    :
    00
  </span>
</Countdown>
`;

exports[`<Countdown /> should trigger onTick and onComplete callbacks 1`] = `
<Countdown
  autoStart={true}
  controlled={false}
  date={1482363377071}
  daysInHours={false}
  intervalDelay={1000}
  onComplete={[MockFunction]}
  onTick={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
        Array [
          Object {
            "completed": false,
            "days": 0,
            "hours": 0,
            "milliseconds": 0,
            "minutes": 0,
            "seconds": 6,
            "total": 6000,
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  precision={0}
  zeroPadTime={2}
>
  <span>
    00
    :
    00
    :
    00
    :
    06
  </span>
</Countdown>
`;
